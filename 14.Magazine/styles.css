*,
::before,
::after {
  padding: 0;
  margin: 0;
  box-sizing: border-box;
}

/*This will set the default font size for your web page to 10px (the browser default is 16px).

This will make it easier for you to work with rem units later, as 2rem would be 20px.*/
html {
  font-size: 62.5%;
}

body {
  font-family: Baskervville, serif;
  color: linen;
  background-color: rgb(20, 30, 40);
}

h1 {
  font-family: Anton, sans-serif;
}

h2,
h3,
h4,
h5,
h6 {
  font-family: Raleway, sans-serif;
}

a {
  text-decoration: none;
  color: linen;
}

/*CSS Grid offers a two-dimensional grid-based layout, allowing you to center items horizontally and vertically while still retaining control to do things like overlap elements.*/
main {
  display: grid;
  /*This will create three columns where the middle column is 94rem wide, and the first and last columns are both 1 fraction of the remaining space in the grid container.*/
  grid-template-columns: minmax(2rem, 1fr) minmax(min-content, 94rem) minmax(
      2rem,
      1fr
    );
  row-gap: 3rem;
}

hr {
  margin: 1.5rem 0;
  border: 1px solid rgba(120, 120, 120, 0.6);
}

.heading {
  grid-column: 2/3;
  display: grid;
  grid-template-columns: repeat(2, 1fr);
  row-gap: 1.5rem;
}

.text {
  grid-column: 2/3;
  font-size: 1.8rem;
  letter-spacing: 0.6px;
  column-width: 25rem;
  text-align: justify;
}

/*Remember that the grid-column property determines which columns an element starts and ends at. There may be times where you are unsure of how many columns your grid will have, but you want an element to stop at the last column. To do this, you can use -1 for the end column.*/
.hero {
  grid-column: 1/-1;
  position: relative;
}

.hero-title {
  text-align: center;
  color: orangered;
  font-size: 8rem;
}

hero-subtitle {
  font-size: 2.4rem;
  color: orangered;
  text-align: center;
}

.author {
  font-size: 2rem;
  font-family: Raleway, sans-serif;
}

/*This will create a hover effect only for the a element within the .author-name, showing the original freeCodeCamp green in the background.*/
.author-name a:hover {
  background-color: #306203;
}

.publish-date {
  color: rgba(255, 255, 255, 0.5);
}

/*If you wanted to add more social icons, but keep them on the same row, you would need to update grid-template-columns to create additional columns. As an alternative, you can use the grid-auto-flow property.*/
.social-icons {
  display: grid;
  font-size: 3rem;
  grid-template-columns: repeat(5, 1fr);
  grid-auto-flow: column;
  /*Now the auto-placement algorithm will kick in when you add a new icon element. However, the algorithm defaults the new column width to be auto, which will not match your current columns.*/
  grid-auto-columns: 1fr;
  /*Much like Flexbox, with CSS Grid you can align the content of grid items with align-items and justify-items. align-items will align child elements along the column axis, and justify-items will align child elements along the row axis.*/
  align-items: center;
}

img {
  width: 100%;
  object-fit: cover;
}

.first-paragraph::first-letter {
  font-size: 6rem;
  color: orangered;
  float: left;
  margin-right: 1rem;
}

.quote {
  color: #00beef;
  font-size: 2.4rem;
  text-align: center;
  font-family: Raleway, sans-serif;
}

.quote::before {
  content: '" ';
}

.quote::after {
  content: ' "';
}

.text-with-images {
  display: grid;
}

.text-with-images {
  display: grid;
  grid-template-columns: 1fr 2fr;
  column-gap: 3rem;
  margin-bottom: 3rem;
}

.lists {
  list-style-type: none;
  margin-top: 2rem;
}

.lists li {
  margin-bottom: 1.5rem;
}

.list-title,
.list-subtitle {
  color: #00beef;
}

.image-wrapper {
  display: grid;
  grid-template-columns: 2fr 1fr;

  /*This will give our grid rows that adjust in height based on the content, but columns that remain a fixed width based on the container.*/
  grid-template-rows: repeat(3, min-content);

  /*The gap property is a shorthand way to set the value of column-gap and row-gap at the same time. If given one value, it sets the column-gap and row-gap both to that value. If given two values, it sets the row-gap to the first value and the column-gap to the second.*/
  gap: 2rem;

  /*The place-items property can be used to set the align-items and justify-items values at the same time. The place-items property takes one or two values. If one value is provided, it is used for both the align-items and justify-items properties. If two values are provided, the first value is used for the align-items property and the second value is used for the justify-items property.*/
  place-items: center;
}

/* This will allow the first and third images to span the full width of the grid.*/
.image-1,
.image-3 {
  grid-column: 1/-1;
}

@media only screen and (max-width: 720px) {
  .image-wrapper {
    grid-template-columns: 1fr;
  }
}

/*This will collapse your bottom text area into a single column on smaller screens.*/
@media only screen and (max-width: 600px) {
  .text-with-images {
    grid-template-columns: 1fr;
  }
}

@media only screen and (max-width: 550px) {
  .hero-title {
    font-size: 6rem;
  }

  .hero-subtitle,
  .author,
  .quote,
  .list-title {
    font-size: 1.8rem;
  }

  .social-icons {
    font-size: 2rem;
  }

  .text {
    font-size: 1.6rem;
  }
}

@media only screen and (max-width: 420px){
  .hero-title{
    font-size: 4.5rem;
  }
}